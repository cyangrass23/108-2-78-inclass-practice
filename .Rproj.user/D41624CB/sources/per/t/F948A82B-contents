---
title: '2020-06-15'
author: "黃湘涵"
date: "2020/6/15"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.

#5-3
```{r}
if(condition){
  Body for TRUE
  }
```
condition: 它是個「是/否」問句。 (使用條件判斷來產生答案T/F，是個logical。)

```{r}
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId 
library(stringr)
# 之後才執行以下程式
if(
  str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T) # condition: 是否輸入學號正確？
) {
  warning("你所輸入的學號不正確")
}
```
```{r}
if(!require(lubridate)){
  install.packages("lubrudate")
}
lubridate::ymd_hms("2020-07-01 13:00:00 GMT")
```
```{r}
twDate <-  c("民國108年12月5日","民國98年10月5日")

library(stringr)
# 準備regex: 
## 取出：「前有」民國，「後有」年的「數字」「們」
## "(?<={A_regex}){target_regex}(?={B_regex})"

target_regex <- "[0-9]+"
A_regex <- "民國"
B_regex <- "年"

regex_pattern <- glue::glue(
  "(?<={A_regex}){target_regex}(?={B_regex})"
  )

print(regex_pattern)

## 如果同學已經很熟就可以直接寫
regex_pattern <-
  "(?<=民國)[0-9]+(?=年)"

# 取出民國年，計算西元年
year <- 
  str_extract(
    twDate,
    regex_pattern)
westernYear <- as.integer(year)+1911

# 替換民國xx年的xx成西元年數字
str_replace(
  twDate,
  regex_pattern,  # 要換掉的文字
  as.character(westernYear) # 要替換的內容
) -> twDate_reformat
print(twDate_reformat)


lubridate::ymd(twDate_reformat)
```


```{r}
convert_TaiwanDate2WesternDate <- function(twDate){
  library(stringr)
  regex_pattern <-
      "(?<=民國)[0-9]+(?=年)"
  
  # 取出民國年，計算西元年
  year <- 
    str_extract(
      twDate,
      regex_pattern)
  westernYear <- as.integer(year)+1911
  
  # 替換民國xx年的xx成西元年數字
  str_replace(
    twDate,
    regex_pattern,  # 要換掉的文字
    as.character(westernYear) # 要替換的內容
  ) -> twDate_reformat
  
  lubridate::ymd(twDate_reformat) -> westernDate
  return(westernDate)
}

convert_TaiwanDate2WesternDate(twDate)
```

```{r}
convert_TaiwanDate2WesternDate <- function(twDate){
  
  if(!require("stringr")){
    install.packages("stringr")
  }
  if(!require("lubridate")){
    install.packages("lubraidate")
  }
  library(stringr)
  regex_pattern <-
    "(?<=民國)[0-9]+(?=年)"
  
  # 取出民國年，計算西元年
  year <- 
    str_extract(
      twDate,
      regex_pattern)
  westernYear <- as.integer(year)+1911
  
  # 替換民國xx年的xx成西元年數字
  str_replace(
    twDate,
    regex_pattern,  # 要換掉的文字
    as.character(westernYear) # 要替換的內容
  ) -> twDate_reformat
  
  lubridate::ymd(twDate_reformat) -> westernDate
  return(westernDate)
}
```
**exercise**
寫一個check_package(pkgName)函數，它會檢查使用者是否有安裝pkgName值（class character，length=1）的套件，如果沒有就安裝
```{r}
check_package <- function(pkgName){
  if(!require(pkaName)){
    install.packages(pkgName)
  }
}

# 測試
check_package("clipr")
check_package("SOAR")  
```
check_package()一次只能偵測一個套件是否有安裝。寫一個check_packages(pkgNames) (packages是複數)，它以給pkgNames input, pkgNames為class character, length任意。
```{r}
check_packages <- function(pkgNames){
  if(!require(pkgNames)){
    install.packages(pkgNames)
  }
}
# 測試
check_packages(c("clipr","SOAR"))
```

```{r}
convert_TaiwanDate2WesternDate <- function(twDate){
  
  check_packages(c("stringr","lubridate"))
  
  regex_pattern <-
    "(?<=民國)[0-9]+(?=年)"
  
  # 取出民國年，計算西元年
  year <- 
    str_extract(
      twDate,
      regex_pattern)
  westernYear <- as.integer(year)+1911
  
  # 替換民國xx年的xx成西元年數字
  str_replace(
    twDate,
    regex_pattern,  # 要換掉的文字
    as.character(westernYear) # 要替換的內容
  ) -> twDate_reformat
  
  lubridate::ymd(twDate_reformat) -> westernDate
  return(westernDate)
}
```

```{r}
askSilly_weather <- function(locationInput,dateInput){
  
  if(!require(jsonlite)){
    install.packages("jsonlite")
  }
  library(stringr)
  if(str_detect(locationInput,"台")){
    str_replace(locationInput,"台","臺") -> locationInput
  }
  jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
  weather_next36hours
  
  (weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
  
  weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
  (weatherAtLocation$elementName=="MaxT") ->
    pick_MaxT
  (weatherAtLocation$elementName=="MinT") ->
    pick_MinT
  weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
  weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
  
  glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
```

```{r}
# 檢視步驟耗時elapse time
system.time(
  jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
  weather_next36hours
)
```

```{r}
if(!exists("weather_next26hours")){
  jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
    weather_next36hours
  SOAR::Store(weather_next36hours)
  }# 存在.R_cache environment中
```
```{r}
library(SOAR)
askSilly_weather2 <- function(locationInput,dateInput){
  if(!exists("weather_next36hours")){
      jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
      weather_next36hours
    SOAR::Store(weather_next36hours) # 存在.R_cache environment中
  }  
  (weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
  
  weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
  (weatherAtLocation$elementName=="MaxT") ->
    pick_MaxT
  (weatherAtLocation$elementName=="MinT") ->
    pick_MinT
  weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
  weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
  
  glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
```

```{r}
library(lubridate)
system.time(
  askSilly_weather("新北市",today())
)
system.time(
  askSilly_weather("臺北市",today())
)

askSilly_weather("新北市",today())
askSilly_weather("臺北市",today())
```
```{r}
SOAR::Remove(weather_next36hours)
system.time(
  askSilly_weather2("新北市",today())
)
system.time(
  askSilly_weather2("臺北市",today())
)

askSilly_weather2("新北市",today())
askSilly_weather2("臺北市",today())
```
###If else

```{r}
if(condition){
  body for TRUE condition
} else {
  body for FALSE condition
}
```

```{r}
myFun<- function(n){
  if((n %% 2) == 1)#奇數
    {
    fvalue <- -(n+1)/2
  }
  else{
    fvalue <- n/2
  }
  return(fvalue)
  }
myFun(25)
```
交卷提早時間
```{r}
jsonlite::fromJSON("https://www.dropbox.com/s/d14j5hp3i5ps657/examSubmissionTimes.json?dl=1") -> examSubmissionTime


head(examSubmissionTime$section)
head(examSubmissionTime$time)
```
```{r}
i <- 1
student_i_section <- examSubmissionTime$section[[i]] 
student_i_time <- examSubmissionTime$time[[i]]

#分歧點
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00",tz="Asia/Taipei") #56
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00",tz="Asia/Taipei") #78

howEarly <- deadline - lubridate::ymd_hms(student_i_time,tz="Asia/Taipei")
```
使用if…else控制情境分歧

```{r}
i <- 1
student_i_section <- examSubmissionTime$section[[i]] 
student_i_time <- examSubmissionTime$time[[i]]

if(student_i_section == "56"){
  deadline <- lubridate::ymd_hms("2020-05-27 15:00:00",tz="Asia/Taipei")
} else{
  deadline <- lubridate::ymd_hms("2020-05-27 17:00:00",tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time,tz="Asia/Taipei")
print(howEarly)
```
function＋map
```{r}
compute_howEarly <- function(student_i_section,student_i_time){
  if(student_i_section == "56"){
  deadline <- lubridate::ymd_hms("2020-05-27 15:00:00",tz="Asia/Taipei")
} else{
  deadline <- lubridate::ymd_hms("2020-05-27 17:00:00",tz="Asia/Taipei")
}
  howEarly <- deadline - lubridate::ymd_hms(student_i_time,tz="Asia/Taipei")
return(howEarly)
}
```

```{r}
number_seq <- c(1,2,3)
compute_howEarly(examSubmissionTime$section[[number_seq[[1]]]],examSubmissionTime$time[[number_seq[[1]]]])
compute_howEarly(examSubmissionTime$section[[2]],examSubmissionTime$time[[2]])
compute_howEarly(examSubmissionTime$section[[3]],examSubmissionTime$time[[3]])
```

```{r}
studentSequence <- 1:length(examSubmissionTime$section)

map(studentSequence,
    ~compute_howEarly(
      examSubmissionTime$section[[.x]],
      examSubmissionTime$time[[.x]])
) -> list_howEarly
```
78節和56節交卷提早時間比較
```{r}
library(magrittr)
list_howEarly %>%
  unlist() -> examSubmissionTime$howEarly

pick_56 <- examSubmissionTime$section == "56"
pick_78 <- examSubmissionTime$section == "78"
mean(examSubmissionTime$howEarly[pick_56])
median(examSubmissionTime$howEarly[pick_56])

mean(examSubmissionTime$howEarly[pick_78])
median(examSubmissionTime$howEarly[pick_78])
```
##5.3.3 if…else if… else
```{r}
if(condition A){
  body for A 
} else if(condition B){
  body for B
} else if(condition C){
  body for C
} else {
  body for none of the above
}
```

```{r}
readline("請輸入你的成績（整數）： ") -> grade # 單獨執行
```

```{r}
if(grade>=90){
  print("優")
}else if(grade>=80 & grade<=89){
  print("良好")
}else if(grade>=70 & grade <= 79){
  print("尚可")
}else {
  print("待加強")
}
```














